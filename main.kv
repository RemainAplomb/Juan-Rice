#===========================================================================================================#

# DEVELOPER:
#        DIBANSA, RAHMANI 
#   BRIEF DESCRIPTION OF THE PROGRAM:
#        This program demonstrates a login and signup system using Firebase for authentication. 
#        The POS class contains the backend methods for creating new user accounts and signing in existing users. 
#        The program initializes a Firebase app, gets a reference to the database, reads the data from the 'users'
#        node, and prints it to the console. It then signs up a new user and logs in an existing user, and 
#        calls the 'is_success' function to display a message indicating whether the login or signup was successful.

#===========================================================================================================#

#========== IMPORTING/INCLUDING KIVY FILES ==========#
# THE KIVY FILES CAN BE FOUND IN THE FOLDER /kv
# THESE INCLUDES ARE A NECESSARY PART OF THE WHOLE
# PROGRAM. INSIDE THESE FILES ARE THE KIVY 
# REPRESENTATION OF THE PROGRAM'S VISUAL INTERACTION
# WITH THE USER.

#:import utils kivy.utils
#:import ScrollEffect kivy.effects.scroll.ScrollEffect
#:include kv/startup_screen.kv
#:include kv/login_screen.kv		
#:include kv/signup_screen.kv
#:include kv/main_screen.kv
#:include kv/status_screen.kv

#====================================================#


#========== THE PROGRAM'S SCREEN MANAGER ==========#
# THE SCREEN MANAGER FUNCTIONALITY IS RESPONSIBLE
# FOR THE PROPER REFERENCING OF EACH SCREEN/WINDOW
# OF THE ANDROID APPLICATION.
#
# THE SCREENS A	RE AS FOLLOWS:
#   StartUpScreen: THE VERY FIRST SCREEN THAT WILL WELCOME THE
#                  USER WHEN THE APP RUNS.
#
#   LogInScreen: THE SCREEN THAT FACILITATES THE USER'S LOG IN.
#
#   SignUpScreen: THE SCREEN THAT FACILITATES THE USER'S ACCOUNT
#                 CREATION.
#
#   MainScreen: THIS SCREEN HOLDS A LIST OF WORKOUT ROUTINES.
#               THIS SCREEN CAN ONLY BE ACCESSED AFTER LOGGING IN.
ScreenManager:
	id: screen_manager
	StatusScreen:
		name: "status_screen"
		id: status_screen
	StartUpScreen:
		name: "startup_screen"
		id: startup_screen
	LogInScreen:
		name: "login_screen"
		id: login_screen
	SignUpScreen:
		name: "signup_screen"
		id: signup_screen
	MainScreen:
		name: "main_screen"
		id: main_screen

#========== SCALE LABEL ==========#
# THIS IS A CUSTOM WIDGET FUNCTIONALITY
# THAT INHERITS THE FEATURE OF A LABEL
# AND A SCALE. USING THIS, THE TEXTS 
# WOULD DYNAMICALLY ADJUST DEPENDING ON
# SCREEN SIZE AND THE NUMBER OF TEXT
# HELD BY THE SCALE LABEL.		
<ScaleLabel@Label>:
    _scale: 1. if self.texture_size[0] < self.width else float(self.width) / self.texture_size[0]
    canvas.before:
        PushMatrix
        Scale:
            origin: self.center
            x: self._scale or 1.
            y: self._scale or 1.
    canvas.after:
        PopMatrix